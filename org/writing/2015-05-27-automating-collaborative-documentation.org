#+STARTUP: showall indent
#+STARTUP: hidestars
#+BEGIN_HTML
---
layout: post
title: DocOps: Automating Collaborative Documentation
excerpt: none
---
#+END_HTML

* How does this help us?

Modern day software aided projects often have a wealth of documentation for using the platform and trouble-shooting the problems withing. This exists in formal documentation for the project, and the formal documentation for all its software and hardware dependencies, in-line code documentation, list-serv's, IRC chats, google docs, wiki's, meeting notes, and a variety of other informal methods such as post-its and "just ask Georgia". Sadly most projects documentation is are profoundly decentralized and challenging for even an advanced user to locate, navigate, and identify as up-to-date and accurate. Newer users, who are best positioned to write "new user & installation guides" are even worse off. They have to learn a myriad issue submission, or publication platforms before they can contribute documentation help or edits as well as identify the rarely documented social conventions required to get their submission acted upon. By this time they are no longer new users, and have lost much of the key experience that makes their input so valuable.

Documentation needs to make it easy for users, partners, and future collaborators to consume, update, customize, localize, and translate. More so, truly good documentation does all this automatically and consistently over time leading to an iterative stewardship process instead of a sporadic process of massive re-reading and re-writes.


* The components of collaborative documentation

- plain text base
- easy editing
- [[http://www.fabriders.net/rrcmdraft-2/][resource creator manifesto]]
- Publication Pipelines

[[images/blog/automated_documentation/pipeline.svg]]

* The components of automated documentation

- metadata is vital
- standardization is key
- You automate the documentation creation workflow, you can't entirely automate the documentation

** Automation

- Test driven documentation
  - Link checking
  - Link Caching to avoid dead references
    - Wayback Machines API
      - https://github.com/elationfoundation/waybackcheck
    - On-Site Caching
      - Memento
        - http://mementoweb.org/depot/native/ia/
      - Amber
        - http://amberlink.org/

  - Monitoring tool/project end-points for documentation needs
    - Automating the creation of documentation issue creation on new releases / API changes / etc.
      - Issues that have project staff check the corresponding documentation sections for where changes occur
      - github web-hooks
        - https://developer.github.com/
        - https://developer.github.com/changes/2015-04-21-organization-hooks-api-finalized/
      - Meta-Data is really important for these types of things [we talk about it later]


- source consumption

  - content
    - sub-project content consumption
      - Meta-Data
        - project descriptions, authors, staff, copyright, etc.
      - documentation
        -
        - NEED documentation standards and stye
    - object requirements meta-data
      - Using standardized defininitions of types of documentation to allow tracking of complete and incomplete elements in documentation allows you to automate its inclusion based upon its completeness.
      - This also allows for automation of styling based upon *where* a markdown object is located, what it is called, and its meta-data instead of having in-line styling.
      - these requirements allow for logging of changes in the documentation that accurately reflect revision changes based upon the larger documentation elements instead of by file/line of text. "The description of project X has changed instead of /projects/X/description was changed."
        - This also allows for central logging of changes that occur at various end-points that do not have long-term revision control.

  - data
    - automated graphic construction
      - doxygen
      - ditta
      - dott

  - Code Documentation and API's
    - literate programming
    - doxygen, etc.
    - Infrastructure for providing key-data for users
      - Tracking the current software state
        - https://travis-ci.org/
      - Tracking where users can get software

      - Tracking testing & needs
        - https://coveralls.io/


  - Mining Communication Channels for Needed Documentation and FAQ's
    - issue cue's
    - listserv questions
      - Commonly users are guided to links to similar questions on a project listserv. This requires expert communicators with historical memory to be available when the question is asked.
      - Capturing, tagging, etc. the content from list-serv questions into a more easily searchable and filterable "FAQ" will allow even newer members of the community to guide new users to a more generalized answer to their problem.
    - IRC bots

  - leveraging your version control system
    - git-hooks
      - why use git hooks?
        - automating meta-data allows for all manner of wonders
        - automating alerts to previous authors of documentation
        - automating README table-of-contents, etc.
        - automating backup / caching of links (see link caching to avoid dead links to external references)

  - Access controls, security, and distribution of documentation
    - meta-data based publication controls
    - building security and authentication into the endpoint collection process
    - Content creation based upon the level of access of the audience it is to be shared with.
      - rapid sanitized documentation creation for a less or more privileged audience can be automated through secured end-points that contain more sensitive information and flags at documentation creation time that determine what index items will be added.
    - Caution/warnings can be added to documents about sharing when sensitivity of atomized documentation increases and therefore the final document should not be shared.


** Easy Access to content


- Make finding the text easy
- Seperate the publishing code / content from the text
  - [[https://developer.github.com/changes/2015-04-21-organization-hooks-api-finalized/
      - Meta-Data is really important for these types of things [we talk about it later]
- indexibility
  - semantic enforcement

- source consumption

  - content
    - sub-project content consumption
      - Meta-Data
        - project descriptions, authors, staff, copyright, etc.
      - documentation
        -
        - NEED documentation standards and style

  - data
    - automated graphic construction
      - graphing out workflows, content structure, and other information using graphviz markdown to show object relationships in meta-data and object's to include in graphics in index files.
      - http://www.graphviz.org/
      - doxygen - code

  - Code Documentation and API's
    - literate programming
    - doxygen, etc.
    - Infrastructure for providing key-data for users
      - Tracking the current software state
        - https://travis-ci.org/
      - Tracking where users can get software

      - Tracking testing & needs
        - https://coveralls.io/




  - Mining Communication Channels for Needed Documentation and FAQ's
    - issue cue's
    - listserv questions
      - Commonly users are guided to links to similar questions on a project listserv. This requires expert communicators with historical memory to be available when the question is asked.
      - Capturing, tagging, etc. the content from list-serv questions into a more easily searchable and filterable "FAQ" will allow even newer members of the community to guide new users to a more generalized answer to their problem.
    - IRC bots



** Easy Access to content

- Make finding the text easy
- Seperate the publishing code / content from the text
  - [[https://the-engine-room.github.io/rdf-primer/][Awesome publication]] with content stuck in a [[https://github.com/the-engine-room/rdf-primer][publication program specific repository structure]] makes it difficult for users who are unfamiliar with the publishing platform to contribute content.

- Consistant Long-term URL's
  - metadata

- Contributor Interface
  - The rise of Github & The failed promise of git
    - DONE [[http://www.codersgrid.com/2014/04/07/gitbook-build-your-programming-book-with-interactive-exercises/][GitBook, Build Your Programming Book With Interactive Exercises]]
    - Review [[http://railsware.com/blog/2014/04/16/creating-books-with-gitbook/][Creating books with GitBook | Railsware Blog]]
    - Review [[https://felixfan.github.io/rstudy/2014/04/22/gitbook/][Statistics and Programming!]]
    - Review [[http://cms.chun.pro/post/agZjaHVjbXNyEgsSBFBvc3QiCG0ZYCcmHCE5DA/gitbook][Gitbook - Chu's CMS]]

- Multiple formats
  - Produce polished content in multiple formats for different types of consumption
    - plain text
    - pdf
    - odt/doc
    - http

- Raw content
  - markdown processing

- automating polished content responsibly
  - Marking versions
  - documenting changes (version control)

** Producing Publishable Content
- Putting it all together
  - Markup/down pre-processors
  - Creating multiple end-points

- Building published content based on style sheets

-
